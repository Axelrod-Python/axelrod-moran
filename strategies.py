import axelrod as axl

def selected_strategies():
    strategies = [
        axl.Adaptive,
        axl.Aggravater,
        axl.ALLCorALLD,
        axl.Alternator,
        axl.AlternatorHunter,
        axl.AntiCycler,
        axl.AntiTitForTat,
        axl.APavlov2006,
        axl.APavlov2011,
        axl.Appeaser,
        axl.AverageCopier,
        axl.BackStabber,
        axl.Bully,
        axl.Calculator,
        axl.Champion,
        axl.Cooperator,
        axl.ContriteTitForTat,
        axl.CyclerCCCCCD,
        axl.CyclerCCCD,
        axl.CyclerCCD,
        axl.CyclerDC,
        axl.CyclerDDC,
        axl.CycleHunter,
        axl.Davis,
        axl.Defector,
        axl.DoubleCrosser,
        axl.Eatherley,
        axl.Feld,
        axl.FirmButFair,
        axl.FoolMeForever,
        axl.FoolMeOnce,
        axl.ForgetfulFoolMeOnce,
        axl.ForgetfulGrudger,
        axl.Forgiver,
        axl.ForgivingTitForTat,
        axl.Fortress3,
        axl.Fortress4,
        axl.PSOGambler,
        axl.GTFT,
        axl.GoByMajority,
        axl.GoByMajority10,
        axl.GoByMajority20,
        axl.GoByMajority40,
        axl.GoByMajority5,
        axl.Handshake,
        axl.HardGoByMajority,
        axl.HardGoByMajority10,
        axl.HardGoByMajority20,
        axl.HardGoByMajority40,
        axl.HardGoByMajority5,
        axl.Golden,
        axl.Grofman,
        axl.Grudger,
        axl.Grumpy,
        axl.HardProber,
        axl.HardTitFor2Tats,
        axl.HardTitForTat,
        axl.Inverse,
        axl.InversePunisher,
        axl.Joss,
        axl.LimitedRetaliate,
        axl.LimitedRetaliate2,
        axl.LimitedRetaliate3,
        axl.EvolvedLookerUp,
        axl.MathConstantHunter,
        axl.MetaHunter,
        axl.NiceAverageCopier,
        axl.Nydegger,
        axl.OmegaTFT,
        axl.OnceBitten,
        axl.OppositeGrudger,
        axl.Pi,
        axl.Predator,
        axl.Prober,
        axl.Prober2,
        axl.Prober3,
        axl.PSOGambler,
        axl.Punisher,
        axl.Raider,
        axl.Random,
        axl.RandomHunter,
        axl.Retaliate,
        axl.Retaliate2,
        axl.Retaliate3,
        axl.Ripoff,
        axl.Shubik,
        axl.SlowTitForTwoTats,
        axl.SneakyTitForTat,
        axl.SoftJoss,
        axl.StochasticWSLS,
        axl.SolutionB1,
        axl.SolutionB5,
        axl.SuspiciousTitForTat,
        axl.Tester,
        axl.ThueMorse,
        axl.Thumper,
        axl.TitForTat,
        axl.TitFor2Tats,
        axl.TrickyCooperator,
        axl.TrickyDefector,
        axl.Tullock,
        axl.TwoTitsForTat,
        axl.WinStayLoseShift,
        axl.ZDExtort2,
        axl.ZDExtort2v2,
        axl.ZDExtort4,
        axl.ZDGen2,
        axl.ZDGTFT2,
        axl.ZDSet2,
        axl.e,
    ]

    strategies = [s for s in strategies if axl.obey_axelrod(s())]
    return strategies
